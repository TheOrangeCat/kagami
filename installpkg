#!/bin/bash
#
# Small utiltity to install and update packages
#

umask 022

# cleanup
unset pkg apkg bpkg cpkg dpkg root temp toremove req a myhooks name version release backup abackup UPDATE NO_BACKUP RUN_SCRIPTS RUN_HOOKS ROOT

LC_ALL="C"
VERSION="20190415"
DB="/var/lib/kagami"
PKGS="$DB/pkgs"
HOOKS="$DB/hooks"
UPDATE=0
NO_BACKUP=0
RUN_SCRIPTS=1
RUN_HOOKS=1
ROOT='/'

msg() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[32m==>\e[0m $msg\n"
}

die() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[31m==!\e[0m $msg\n"

	# remove garbage
	rm -rf "$temp"
	unset pkg apkg bpkg cpkg dpkg root temp toremove req a myhooks name version release backup abackup UPDATE NO_BACKUP RUN_SCRIPTS RUN_HOOKS ROOT

	# bye
	exit 1
}

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
	die "kagami: package manager should be run as root"
	fi
}

# from old apk-tools
list_subtract() {
	(
		cat "$1" "$2" | sort | uniq -u
		cat "$1"
	) | sort | uniq -d
}

# this stuff too
list_uninstall() {
	local f p
	local files=$(sort -r "$1" | sed 's:^:'"$root"': ; s:/^[^\.]\./::g; s:/\{2,\}:/:g; s:/\./:/:g')
	if [ -z "$DRYRUN" ] ; then
		echo "$files" | tr '\n' '\0' | xargs -0 rm 2>/dev/null
		echo "$files" | tr '\n' '\0' | xargs -0 rmdir 2>/dev/null
		[ "$2" ] && echo "$files" >> "$2"
	fi
	return 0
}

run_hooks() {
	if [ "$RUN_HOOKS" = "1" ]; then
		for myhooks in $(ls "$root"$HOOKS/ | sort); do
			chroot "$root"/ /bin/bash $HOOKS/$myhooks
		done
	fi
}

run_script() {
	local script="$1"

	if [ "$RUN_SCRIPTS" = "1" ]; then
		if [ -f $PKGS/$dpkg/$script ]; then
			/usr/bin/bash $PKGS/$dpkg/$script || true
		fi
	fi
}

backup() {
	if [ "$NO_BACKUP" != "1" ]; then
		if [ -n "$backup" ]; then
			for abackup in ${backup[@]}; do
				if [ -f "$root"/$abackup ]; then
					mv "$root"/$abackup "$root"/$abackup.bak
				fi
			done
		fi
	fi
}

restore_files() {
	if [ "$NO_BACKUP" != "1" ]; then
		if [ -n "$backup" ]; then
			for abackup in ${backup[@]}; do
				if [ -f "$root"/$abackup ]; then
					mv "$root"/$abackup.bak "$root"/$abackup
				fi
			done
		fi
	fi
}

check_for_root

if [ -z "$1" ]; then
	die "kagami: specify arguments. Consider to run 'installpkg --help'"
else
	while [ "$1" ]; do
		case $1 in
			--update|-u|--reinstall|-ri)
				UPDATE=1
				;;
			--no-backup|-nb)
				NO_BACKUP=1
				;;
			--no-scripts-ns)
				RUN_SCRIPTS=0
				;;
			--no-hooks|-nh)
				RUN_HOOKS=0
				;;
			--root=*)
				ROOT="${ARG#*=}"
				;;
			*.bhv.*.tar.zst)
				MYPKG="$1"
				;;
		esac
		shift
	done
fi

pkg="$MYPKG"
root="$ROOT"
temp="$(mktemp -d)" || die "kagami: couldn't create a temporary directory"

[ -f "$pkg" ] || die "kagami: file not found or not specified"
[ -z "${pkg##*.bhv.$BARCH.tar.zst}" ] || die "kagami: your package extension is not supported"

apkg="$(basename $pkg)"
bpkg="${apkg%*.bhv.$BARCH.tar.zst}"
cpkg="${bpkg%-*}"
dpkg="${cpkg%#*}"

if [ -z "$UPDATE" ]; then
	if [ -d "$root"/$PKGS/$dpkg ]; then
		UPDATE=1
	else
		UPDATE=0
	fi
fi

if [ "$UPDATE" = "1" ]; then
	msg "Upgrading $dpkg"
else
	msg "Installing $dpkg"
fi

rm -rf "$root"/bepsu

bsdtar tf "$pkg" >/dev/null || die "kagami: can't extract package archive. check if archive is broken"

bsdtar -xf "$pkg" -C "$temp"

for req in manifest filelist; do
	if [ ! -f "$temp"/bepsu/$req ]; then
		die "kagami: couldn't find '"$req"' file"
	fi
done

source "$temp"/bepsu/manifest

backup

if [ "$UPDATE" = "1" ]; then
	cp "$root"/$PKGS/$dpkg/filelist "$temp"/filelist.old
fi

if [ ! -d "$root"/$PKGS/$dpkg ]; then
	mkdir -p "$root"/$PKGS/$dpkg || die "kagami: couldn't write package in database"
fi

for req in manifest filelist; do
	cp "$temp"/bepsu/$req "$root"/$PKGS/$dpkg/$req || die "kagami: failed to copy required files"
done

for req in pre-{install,update,remove} post-{install,update,remove}; do
	if [ -f "$temp"/bepsu/$req ]; then
		cp "$temp"/bepsu/$req "$root"/$PKGS/$dpkg/$req
	fi
done

if [ "$UPDATE" = "1" ]; then
	run_script pre-update
else
	run_script pre-install
fi

bsdtar -xf "$pkg" -C "$root"/ && rm -rf "$root"/bepsu

if [ "$UPDATE" = "1" ]; then
	list_subtract "$temp"/filelist.old "$temp"/bepsu/filelist | list_uninstall -
fi

restore_files

if [ "$UPDATE" = "1" ]; then
	run_script post-update
else
	run_script post-install
fi

run_hooks

rm -rf "$temp"

exit 0

